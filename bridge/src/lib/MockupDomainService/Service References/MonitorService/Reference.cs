//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Org.OpenEngSB.DotNet.Lib.MockupDomainService.MonitorService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SimpleMethodInfo", Namespace="http://schemas.datacontract.org/2004/07/Org.OpenEngSB.DotNet.Lib.MockupMonitor.Co" +
        "mmunication")]
    [System.SerializableAttribute()]
    public partial class SimpleMethodInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Org.OpenEngSB.DotNet.Lib.MockupDomainService.MonitorService.SimpleParameterInfo[] ParametersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Org.OpenEngSB.DotNet.Lib.MockupDomainService.MonitorService.SimpleType ReturnTypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Org.OpenEngSB.DotNet.Lib.MockupDomainService.MonitorService.SimpleParameterInfo[] Parameters {
            get {
                return this.ParametersField;
            }
            set {
                if ((object.ReferenceEquals(this.ParametersField, value) != true)) {
                    this.ParametersField = value;
                    this.RaisePropertyChanged("Parameters");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Org.OpenEngSB.DotNet.Lib.MockupDomainService.MonitorService.SimpleType ReturnType {
            get {
                return this.ReturnTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ReturnTypeField, value) != true)) {
                    this.ReturnTypeField = value;
                    this.RaisePropertyChanged("ReturnType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SimpleType", Namespace="http://schemas.datacontract.org/2004/07/Org.OpenEngSB.DotNet.Lib.MockupMonitor.Co" +
        "mmunication")]
    [System.SerializableAttribute()]
    public partial class SimpleType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AssemblyQualifiedNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Org.OpenEngSB.DotNet.Lib.MockupDomainService.MonitorService.SimpleType BaseTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ContainsGenericParametersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FullNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsArrayField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsClassField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsEnumField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsGenericTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsInterfaceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsPrimitiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsSerializableField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsValueTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NamespaceField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AssemblyQualifiedName {
            get {
                return this.AssemblyQualifiedNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AssemblyQualifiedNameField, value) != true)) {
                    this.AssemblyQualifiedNameField = value;
                    this.RaisePropertyChanged("AssemblyQualifiedName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Org.OpenEngSB.DotNet.Lib.MockupDomainService.MonitorService.SimpleType BaseType {
            get {
                return this.BaseTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.BaseTypeField, value) != true)) {
                    this.BaseTypeField = value;
                    this.RaisePropertyChanged("BaseType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ContainsGenericParameters {
            get {
                return this.ContainsGenericParametersField;
            }
            set {
                if ((this.ContainsGenericParametersField.Equals(value) != true)) {
                    this.ContainsGenericParametersField = value;
                    this.RaisePropertyChanged("ContainsGenericParameters");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FullName {
            get {
                return this.FullNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FullNameField, value) != true)) {
                    this.FullNameField = value;
                    this.RaisePropertyChanged("FullName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsArray {
            get {
                return this.IsArrayField;
            }
            set {
                if ((this.IsArrayField.Equals(value) != true)) {
                    this.IsArrayField = value;
                    this.RaisePropertyChanged("IsArray");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsClass {
            get {
                return this.IsClassField;
            }
            set {
                if ((this.IsClassField.Equals(value) != true)) {
                    this.IsClassField = value;
                    this.RaisePropertyChanged("IsClass");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsEnum {
            get {
                return this.IsEnumField;
            }
            set {
                if ((this.IsEnumField.Equals(value) != true)) {
                    this.IsEnumField = value;
                    this.RaisePropertyChanged("IsEnum");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsGenericType {
            get {
                return this.IsGenericTypeField;
            }
            set {
                if ((this.IsGenericTypeField.Equals(value) != true)) {
                    this.IsGenericTypeField = value;
                    this.RaisePropertyChanged("IsGenericType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsInterface {
            get {
                return this.IsInterfaceField;
            }
            set {
                if ((this.IsInterfaceField.Equals(value) != true)) {
                    this.IsInterfaceField = value;
                    this.RaisePropertyChanged("IsInterface");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsPrimitive {
            get {
                return this.IsPrimitiveField;
            }
            set {
                if ((this.IsPrimitiveField.Equals(value) != true)) {
                    this.IsPrimitiveField = value;
                    this.RaisePropertyChanged("IsPrimitive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsSerializable {
            get {
                return this.IsSerializableField;
            }
            set {
                if ((this.IsSerializableField.Equals(value) != true)) {
                    this.IsSerializableField = value;
                    this.RaisePropertyChanged("IsSerializable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsValueType {
            get {
                return this.IsValueTypeField;
            }
            set {
                if ((this.IsValueTypeField.Equals(value) != true)) {
                    this.IsValueTypeField = value;
                    this.RaisePropertyChanged("IsValueType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Namespace {
            get {
                return this.NamespaceField;
            }
            set {
                if ((object.ReferenceEquals(this.NamespaceField, value) != true)) {
                    this.NamespaceField = value;
                    this.RaisePropertyChanged("Namespace");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SimpleParameterInfo", Namespace="http://schemas.datacontract.org/2004/07/Org.OpenEngSB.DotNet.Lib.MockupMonitor.Co" +
        "mmunication")]
    [System.SerializableAttribute()]
    public partial class SimpleParameterInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Org.OpenEngSB.DotNet.Lib.MockupDomainService.MonitorService.SimpleType ParameterTypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Org.OpenEngSB.DotNet.Lib.MockupDomainService.MonitorService.SimpleType ParameterType {
            get {
                return this.ParameterTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ParameterTypeField, value) != true)) {
                    this.ParameterTypeField = value;
                    this.RaisePropertyChanged("ParameterType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MethodType", Namespace="http://schemas.datacontract.org/2004/07/Org.OpenEngSB.DotNet.Lib.MockupMonitor.Co" +
        "mmunication")]
    public enum MethodType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Registered = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Retrieved = 1,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MonitorService.IMonitorService", CallbackContract=typeof(Org.OpenEngSB.DotNet.Lib.MockupDomainService.MonitorService.IMonitorServiceCallback))]
    public interface IMonitorService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonitorService/TestMethod", ReplyAction="http://tempuri.org/IMonitorService/TestMethodResponse")]
        string TestMethod(string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonitorService/AddMethod", ReplyAction="http://tempuri.org/IMonitorService/AddMethodResponse")]
        void AddMethod(int id, Org.OpenEngSB.DotNet.Lib.MockupDomainService.MonitorService.SimpleMethodInfo method, Org.OpenEngSB.DotNet.Lib.MockupDomainService.MonitorService.MethodType type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonitorService/RemoveMethod", ReplyAction="http://tempuri.org/IMonitorService/RemoveMethodResponse")]
        void RemoveMethod(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonitorService/MethodExecuted", ReplyAction="http://tempuri.org/IMonitorService/MethodExecutedResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Org.OpenEngSB.DotNet.Lib.MockupDomainService.MonitorService.SimpleMethodInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Org.OpenEngSB.DotNet.Lib.MockupDomainService.MonitorService.SimpleParameterInfo[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Org.OpenEngSB.DotNet.Lib.MockupDomainService.MonitorService.SimpleParameterInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Org.OpenEngSB.DotNet.Lib.MockupDomainService.MonitorService.SimpleType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Org.OpenEngSB.DotNet.Lib.MockupDomainService.MonitorService.MethodType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        object MethodExecuted(int id, object[] parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonitorService/Unsubscribe", ReplyAction="http://tempuri.org/IMonitorService/UnsubscribeResponse")]
        void Unsubscribe();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMonitorServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonitorService/ExecuteMethod", ReplyAction="http://tempuri.org/IMonitorService/ExecuteMethodResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Org.OpenEngSB.DotNet.Lib.MockupDomainService.MonitorService.SimpleMethodInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Org.OpenEngSB.DotNet.Lib.MockupDomainService.MonitorService.SimpleParameterInfo[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Org.OpenEngSB.DotNet.Lib.MockupDomainService.MonitorService.SimpleParameterInfo))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Org.OpenEngSB.DotNet.Lib.MockupDomainService.MonitorService.SimpleType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Org.OpenEngSB.DotNet.Lib.MockupDomainService.MonitorService.MethodType))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        object ExecuteMethod(int id, object[] parameters);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMonitorServiceChannel : Org.OpenEngSB.DotNet.Lib.MockupDomainService.MonitorService.IMonitorService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MonitorServiceClient : System.ServiceModel.DuplexClientBase<Org.OpenEngSB.DotNet.Lib.MockupDomainService.MonitorService.IMonitorService>, Org.OpenEngSB.DotNet.Lib.MockupDomainService.MonitorService.IMonitorService {
        
        public MonitorServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public MonitorServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public MonitorServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public MonitorServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public MonitorServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public string TestMethod(string value) {
            return base.Channel.TestMethod(value);
        }
        
        public void AddMethod(int id, Org.OpenEngSB.DotNet.Lib.MockupDomainService.MonitorService.SimpleMethodInfo method, Org.OpenEngSB.DotNet.Lib.MockupDomainService.MonitorService.MethodType type) {
            base.Channel.AddMethod(id, method, type);
        }
        
        public void RemoveMethod(int id) {
            base.Channel.RemoveMethod(id);
        }
        
        public object MethodExecuted(int id, object[] parameters) {
            return base.Channel.MethodExecuted(id, parameters);
        }
        
        public void Unsubscribe() {
            base.Channel.Unsubscribe();
        }
    }
}
