<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Innovatian.Configuration</name>
    </assembly>
    <members>
        <member name="T:Innovatian.Configuration.IConfigurationSection">
            <summary>
            Defines a named section of a configuration exposing key value setting
            pairs. All settings are stored as strings until requested.
            </summary>
        </member>
        <member name="M:Innovatian.Configuration.IConfigurationSection.Get``1(System.String)">
            <summary>
            Returns the value of the setting name <paramref name="key"/> as a
            <c>T</c> instance.
            </summary>
            <typeparam name="T">
            The type needed by the user.
            </typeparam>
            <param name="key">
            The name of the setting.
            </param>
            <returns>returns the setting value as a <c>T</c> instance or
            defatult(T) if the key does not exist.
            </returns>
        </member>
        <member name="M:Innovatian.Configuration.IConfigurationSection.TryGet``1(System.String,``0@)">
            <summary>
            Returns <c>true</c> if the value of the setting name <paramref name="key"/> 
            exists and sets the <c>T</c> instance via the out parameter. If the key
            was not found, <c>false</c> is returned and the out value is set to default(T).
            </summary>
            <typeparam name="T">
            The type needed by the user.
            </typeparam>
            <param name="key">
            The name of the setting.
            </param>
            <param name="value">
            The value to set if the key exists.
            </param>
            <returns>returns <c>true</c> if the setting exists and sets the value as a <c>T</c> instance or
            <c>false</c> if the key does not exist and sets the out value to default(T).
            </returns>
        </member>
        <member name="M:Innovatian.Configuration.IConfigurationSection.Get``1(System.String,``0)">
            <summary>
            Returns the value of the setting name <paramref name="key"/> as a
            <c>T</c> instance.
            </summary>
            <typeparam name="T">
            The type needed by the user.
            </typeparam>
            <param name="key">
            The name of the setting.
            </param>
            <param name="defaultValue">
            The default value.
            </param>
            <returns>returns the setting value as a <c>T</c> instance or <paramref
            name="defaultValue"/> if the key does not exist.
            </returns>
        </member>
        <member name="M:Innovatian.Configuration.IConfigurationSection.Remove(System.String)">
            <summary>
            Removes the specified key and its value from the section.
            </summary>
            <param name="key">
            The name of the setting.
            </param>
            <returns>
            <c>true</c> if the setting named <paramref name="key"/> existed and was
            removed; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Innovatian.Configuration.IConfigurationSection.Set``1(System.String,``0)">
            <summary>
            Sets the value of the setting name <paramref name="key"/>. If the setting
            does not exist, it is created.
            </summary>
            <typeparam name="T">
            The type of the setting being saved.
            </typeparam>
            <param name="key">
            The name of the setting.
            </param>
            <param name="value">
            The value to save in this section.
            </param>
        </member>
        <member name="P:Innovatian.Configuration.IConfigurationSection.Name">
            <summary>
            The name of the section.
            </summary>
        </member>
        <member name="T:Innovatian.Configuration.IsoStorageConfigurationSource">
            <summary>
            
            </summary>
        </member>
        <member name="T:Innovatian.Configuration.AbstractConfigurationSource">
            <summary>
            AbstractConfigurationSource provides a skeleton implementation of 
            <see cref="T:Innovatian.Configuration.IConfigurationSource"/> which provides all merging, adding,
            and expanding features. Inheritors provide implementation specific loading
            and saving functionality.
            </summary>
        </member>
        <member name="T:Innovatian.Configuration.IConfigurationSource">
            <summary>
            Defines methods and properties representing a configuration data source.
            </summary>
        </member>
        <member name="M:Innovatian.Configuration.IConfigurationSource.Add(Innovatian.Configuration.IConfigurationSection)">
            <summary>
            Adds a named configuration section to this source. If the section
            name is already in this source, the values from the new source will
            override and be added.
            </summary>
            <param name="section">The named section to add.</param>
        </member>
        <member name="M:Innovatian.Configuration.IConfigurationSource.ExpandKeyValues">
            <summary>
            Processes all sections expanding configuration variables and saving
            the new values.
            </summary>
        </member>
        <member name="M:Innovatian.Configuration.IConfigurationSource.Merge(Innovatian.Configuration.IConfigurationSource[])">
            <summary>
            Merges the sources into this instance. Each source's sections will
            be added and merged. If the sources contain duplicate sections, they
            will be merged.
            </summary>
            <param name="configurationSources"></param>
        </member>
        <member name="M:Innovatian.Configuration.IConfigurationSource.Reload">
            <summary>
            Discards all sections and merged sources and reloads a fresh set of
            settings.
            </summary>
        </member>
        <member name="M:Innovatian.Configuration.IConfigurationSource.Save">
            <summary>
            Saves all sections. All data merged from other merged sources will
            be included.
            </summary>
        </member>
        <member name="M:Innovatian.Configuration.IConfigurationSource.Clear">
            <summary>
            Clears all sections, their values, and calls Clear on all internal
            configuration sources.
            </summary>
        </member>
        <member name="P:Innovatian.Configuration.IConfigurationSource.AutoSave">
            <summary>
            if <see cref="P:Innovatian.Configuration.IConfigurationSource.AutoSave"/> is <c>true</c>, the inheritor should save
            every time a key is updated; otherwise, updates should be ignored.
            </summary>
        </member>
        <member name="P:Innovatian.Configuration.IConfigurationSource.Sections">
            <summary>
            Provides user access to named configuration sections.
            </summary>
        </member>
        <member name="M:Innovatian.Configuration.AbstractConfigurationSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Innovatian.Configuration.AbstractConfigurationSource"/> class.
            </summary>
        </member>
        <member name="M:Innovatian.Configuration.AbstractConfigurationSource.Merge(Innovatian.Configuration.IConfigurationSource[])">
            <summary>
            Merges the sources into this instance. Each source's sections will
            be added and merged. If the sources contain duplicate sections, they
            will be merged.
            </summary>
            <param name="configurationSources"></param>
        </member>
        <member name="M:Innovatian.Configuration.AbstractConfigurationSource.Save">
            <summary>
            Saves all sections. All data merged from other merged sources will
            be included.
            </summary>
        </member>
        <member name="M:Innovatian.Configuration.AbstractConfigurationSource.Reload">
            <summary>
            Discards all sections and merged sources and reloads a fresh set of
            settings.
            </summary>
        </member>
        <member name="M:Innovatian.Configuration.AbstractConfigurationSource.Add(Innovatian.Configuration.IConfigurationSection)">
            <summary>
            Adds a named configuration section to this source. If the section
            name is already in this source, the values from the new source will
            override and be added.
            </summary>
            <param name="section">The named section to add.</param>
        </member>
        <member name="M:Innovatian.Configuration.AbstractConfigurationSource.ExpandKeyValues">
            <summary>
            Processes all sections expanding configuration variables and saving
            the new values.
            </summary>
        </member>
        <member name="M:Innovatian.Configuration.AbstractConfigurationSource.Clear">
            <summary>
            Clears the sections and sources of this instance.
            </summary>
        </member>
        <member name="M:Innovatian.Configuration.AbstractConfigurationSource.OnPropertyChanged(System.String,System.String)">
            <summary>
            Called when [property changed].
            </summary>
            <param name="section">The section.</param>
            <param name="key">The key.</param>
        </member>
        <member name="M:Innovatian.Configuration.AbstractConfigurationSource.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can
            be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Innovatian.Configuration.AbstractConfigurationSource.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can
            be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Innovatian.Configuration.AbstractConfigurationSource.ConfigurationSources">
            <summary>
            Provides access to the base configuration sources to inheritors.
            </summary>
        </member>
        <member name="P:Innovatian.Configuration.AbstractConfigurationSource.SyncRoot">
            <summary>
            Gets the sync root for modifying the internal configuration sources and sections.
            </summary>
            <value>The sync root.</value>
        </member>
        <member name="P:Innovatian.Configuration.AbstractConfigurationSource.AutoSave">
            <summary>
            if <see cref="P:Innovatian.Configuration.AbstractConfigurationSource.AutoSave"/> is <c>true</c>, the inheritor should save
            every time a key is updated; otherwise, updates should be ignored.
            </summary>
            <value></value>
        </member>
        <member name="P:Innovatian.Configuration.AbstractConfigurationSource.Sections">
            <summary>
            Provides user access to named configuration sections.
            </summary>
            <value></value>
        </member>
        <member name="M:Innovatian.Configuration.IsoStorageConfigurationSource.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Innovatian.Configuration.IsoStorageConfigurationSource"/> class.
            </summary>
            <param name="fileName">
            Name of the file.
            </param>
            <remarks>
            If you specify invalid scope for your application, you will get an <see cref="T:System.IO.IsolatedStorage.IsolatedStorageException"/>.
            </remarks>
        </member>
        <member name="M:Innovatian.Configuration.IsoStorageConfigurationSource.#ctor(System.IO.IsolatedStorage.IsolatedStorageScope,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Innovatian.Configuration.IsoStorageConfigurationSource"/> class.
            </summary>
            <param name="scope">
            The scope for the isolated storage file.
            </param>
            <param name="fileName">
            Name of the file.
            </param>
            <remarks>
            If you specify invalid scope for your application, you will get an <see cref="T:System.IO.IsolatedStorage.IsolatedStorageException"/>.
            </remarks>
        </member>
        <member name="M:Innovatian.Configuration.IsoStorageConfigurationSource.Save">
            <summary>
            Saves all sections. All data merged from other merged sources will
            be included.
            </summary>
        </member>
        <member name="M:Innovatian.Configuration.IsoStorageConfigurationSource.Reload">
            <summary>
            Discards all sections and merged sources and reloads a fresh set of
            settings.
            </summary>
        </member>
        <member name="P:Innovatian.Configuration.IsoStorageConfigurationSource.FullPath">
            <summary>
            Gets or sets the full path to the isolated storage file.
            </summary>
            <value>The full path.</value>
        </member>
        <member name="P:Innovatian.Configuration.IsoStorageConfigurationSource.Scope">
            <summary>
            Gets or sets the IsolatedStorageScope for this configuration source.
            </summary>
            <value>The scope.</value>
        </member>
        <member name="T:Innovatian.Configuration.AbstractFileConfigurationSource">
            <summary>
            AbstractFileConfigurationSource add helper functions to load configuration sources from file
            that are not needed in general implementations of <see cref="T:Innovatian.Configuration.IConfigurationSource"/>.
            </summary>
        </member>
        <member name="M:Innovatian.Configuration.AbstractFileConfigurationSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Innovatian.Configuration.AbstractFileConfigurationSource"/> class.
            </summary>
        </member>
        <member name="M:Innovatian.Configuration.AbstractFileConfigurationSource.Load(System.String)">
            <summary>
            Loads the current instance from the given file.
            </summary>
            <param name="fileName">
            The name of the file to load into this instance.
            </param>
        </member>
        <member name="M:Innovatian.Configuration.AbstractFileConfigurationSource.FromFile``1(System.String)">
            <summary>
            Loads an <see cref="T:Innovatian.Configuration.IConfigurationSource"/> from the given file.
            </summary>
            <param name="fileName">
            The name of the file to load into a new instance.
            </param>
            <returns></returns>
        </member>
        <member name="M:Innovatian.Configuration.AbstractFileConfigurationSource.Save">
            <summary>
            Saves all sections. All data merged from other merged sources will
            be included.
            </summary>
        </member>
        <member name="M:Innovatian.Configuration.AbstractFileConfigurationSource.Reload">
            <summary>
            If this instance has a file associated with it 
            then the settings are cleared and reloaded from file.
            If, however, there is no <see cref="P:Innovatian.Configuration.AbstractFileConfigurationSource.FileName"/> set, then
            nothing is done.
            </summary>
        </member>
        <member name="P:Innovatian.Configuration.AbstractFileConfigurationSource.DefaultEncoding">
            <summary>
            Gets or sets the default file encoding.
            </summary>
            <value>The default encoding.</value>
        </member>
        <member name="P:Innovatian.Configuration.AbstractFileConfigurationSource.FileName">
            <summary>
            The file used to store the configuration on disk.
            </summary>
        </member>
        <member name="T:Innovatian.Configuration.DotNetConfigurationSource">
            <summary>
            
            </summary>
        </member>
        <member name="T:Innovatian.Configuration.XmlConfigurationSource">
            <summary>
            
            </summary>
        </member>
        <member name="M:Innovatian.Configuration.XmlConfigurationSource.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Innovatian.Configuration.XmlConfigurationSource"/> class.
            </summary>
            <param name="xml">The XML source.</param>
        </member>
        <member name="M:Innovatian.Configuration.XmlConfigurationSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Innovatian.Configuration.XmlConfigurationSource"/> class.
            </summary>
        </member>
        <member name="M:Innovatian.Configuration.XmlConfigurationSource.FromFile(System.String)">
            <summary>
            Creates a new <see cref="T:Innovatian.Configuration.IConfigurationSource"/> instance from the file specified.
            </summary>
            <param name="fileName">
            The file to load.
            </param>
            <returns></returns>
        </member>
        <member name="M:Innovatian.Configuration.XmlConfigurationSource.Parse(System.String)">
            <summary>
            Parses the specified XML.
            </summary>
            <param name="xml">The XML.</param>
        </member>
        <member name="M:Innovatian.Configuration.XmlConfigurationSource.Load(System.String)">
            <summary>
            Loads the current instance from the given file.
            </summary>
            <param name="fileName">The name of the file to load into this instance.</param>
        </member>
        <member name="M:Innovatian.Configuration.XmlConfigurationSource.Process(System.Xml.Linq.XDocument)">
            <summary>
            Processes the specified document.
            </summary>
            <param name="document">The document.</param>
        </member>
        <member name="M:Innovatian.Configuration.XmlConfigurationSource.ToXml(Innovatian.Configuration.IConfigurationSection)">
            <summary>
            Converts the given <see cref="T:Innovatian.Configuration.IConfigurationSection"/> to an XML representation.
            </summary>
            <param name="section">
            The section to convert to XML.
            </param>
            <returns>
            A XML representation of the <see cref="T:Innovatian.Configuration.IConfigurationSection"/>.
            </returns>
        </member>
        <member name="M:Innovatian.Configuration.XmlConfigurationSource.ToXml(System.Collections.Generic.IEnumerable{Innovatian.Configuration.IConfigurationSection})">
            <summary>
            Converts the given <see cref="T:Innovatian.Configuration.IConfigurationSection"/>s to an XML representation.
            </summary>
            <param name="sections">
            The sections to convert to XML.
            </param>
            <returns>
            A XML representation of the <see cref="T:Innovatian.Configuration.IConfigurationSection"/>s.
            </returns>
        </member>
        <member name="M:Innovatian.Configuration.XmlConfigurationSource.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Innovatian.Configuration.DotNetConfigurationSource.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Innovatian.Configuration.DotNetConfigurationSource"/> class.
            </summary>
            <param name="xml">The XML source.</param>
        </member>
        <member name="M:Innovatian.Configuration.DotNetConfigurationSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Innovatian.Configuration.DotNetConfigurationSource"/> class.
            </summary>
        </member>
        <member name="M:Innovatian.Configuration.DotNetConfigurationSource.FromFile(System.String)">
            <summary>
            Froms the file.
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns></returns>
        </member>
        <member name="M:Innovatian.Configuration.DotNetConfigurationSource.Process(System.Xml.Linq.XDocument)">
            <summary>
            Processes the specified document.
            </summary>
            <param name="document">The document.</param>
        </member>
        <member name="M:Innovatian.Configuration.DotNetConfigurationSource.ToXml(Innovatian.Configuration.IConfigurationSection)">
            <summary>
            Converts the given <see cref="T:Innovatian.Configuration.IConfigurationSection"/> to an XML representation.
            </summary>
            <param name="section">
            The section to convert to XML.
            </param>
            <returns>
            A XML representation of the <see cref="T:Innovatian.Configuration.IConfigurationSection"/>.
            </returns>
        </member>
        <member name="M:Innovatian.Configuration.DotNetConfigurationSource.ToXml(System.Collections.Generic.IEnumerable{Innovatian.Configuration.IConfigurationSection})">
            <summary>
            Converts the given <see cref="T:Innovatian.Configuration.IConfigurationSection"/>s to an XML representation.
            </summary>
            <param name="sections">
            The sections to convert to XML.
            </param>
            <returns>
            A XML representation of the <see cref="T:Innovatian.Configuration.IConfigurationSection"/>s.
            </returns>
        </member>
        <member name="M:Innovatian.Configuration.DotNetConfigurationSource.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Innovatian.Configuration.StringArrayConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Innovatian.Configuration.StringArrayConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="M:Innovatian.Configuration.StringArrayConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="destinationType"/> parameter is null. </exception>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="M:Innovatian.Configuration.SettingConverter.GetTFromString``1(System.String)">
            <summary>
            Gets an instance of T from string.
            </summary>
            <typeparam name="T">
            </typeparam>
            <param name="value">The value to convert.</param>
            <returns>
            <paramref name="value"/> as an instance of <c>T</c> or an exception if
            the conversion is not possible.
            </returns>
        </member>
        <member name="M:Innovatian.Configuration.SettingConverter.GetStringFromT``1(``0)">
            <summary>
            Gets a string from an instance of <c>T</c>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <returns>
            <c>T</c> as a string.
            </returns>
            <remarks>
            If you are using a custom or special type, you should make sure that
            there is a <see cref="T:System.ComponentModel.TypeConverter"/> registered for it.
            </remarks>
        </member>
        <member name="M:Innovatian.Configuration.SettingConverter.ConvertToBool``1(System.String)">
            <summary>
            Converts the string value to a boolean. Int32 values are able to be
            parsed.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Innovatian.Configuration.SettingConverter.IsBool``1">
            <summary>
            Determines if <c>T</c> is of type <see cref="T:System.Boolean"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Innovatian.Configuration.SettingConverter.IsStringArray``1">
            <summary>
            Determines if <c>T</c> is of type <see cref="!:string[]"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Innovatian.Configuration.SettingConverter.IsByteArray``1">
            <summary>
            Determines if <c>T</c> is of type <see cref="!:byte[]"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Innovatian.Configuration.ByteArrayConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="sourceType">A <see cref="T:System.Type"/> that represents the type you want to convert from.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:Innovatian.Configuration.ByteArrayConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="M:Innovatian.Configuration.ByteArrayConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/>. If null is passed, the current culture is assumed.</param>
            <param name="value">The <see cref="T:System.Object"/> to convert.</param>
            <param name="destinationType">The <see cref="T:System.Type"/> to convert the <paramref name="value"/> parameter to.</param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.ArgumentNullException">The <paramref name="destinationType"/> parameter is null. </exception>
            <exception cref="T:System.NotSupportedException">The conversion cannot be performed. </exception>
        </member>
        <member name="T:Innovatian.Configuration.Properties.Text">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Innovatian.Configuration.Properties.Text.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Innovatian.Configuration.Properties.Text.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Innovatian.Configuration.Properties.Text.CannotRoundTripType0">
            <summary>
              Looks up a localized string similar to There is no TypeConverter registered that can save type {0} to a string and back..
            </summary>
        </member>
        <member name="P:Innovatian.Configuration.Properties.Text.DestinationFileNameNotSet">
            <summary>
              Looks up a localized string similar to Destination file name must be set before saving..
            </summary>
        </member>
        <member name="P:Innovatian.Configuration.Properties.Text.DocumentRootMustNotBeNull">
            <summary>
              Looks up a localized string similar to Document root must not be null..
            </summary>
        </member>
        <member name="P:Innovatian.Configuration.Properties.Text.ExpandKeyMissing0">
            <summary>
              Looks up a localized string similar to Expand key not found: {0}..
            </summary>
        </member>
        <member name="P:Innovatian.Configuration.Properties.Text.ExpandSectionMissing0">
            <summary>
              Looks up a localized string similar to Expand section not found: {0}..
            </summary>
        </member>
        <member name="P:Innovatian.Configuration.Properties.Text.FailedToConvert0T1">
            <summary>
              Looks up a localized string similar to Failed to convert string [{0}] to type [{1}]..
            </summary>
        </member>
        <member name="P:Innovatian.Configuration.Properties.Text.InvalidShortNameLength">
            <summary>
              Looks up a localized string similar to The short name may only be 1 or 2 characters.
            </summary>
        </member>
        <member name="P:Innovatian.Configuration.Properties.Text.InvalidStorageScope">
            <summary>
              Looks up a localized string similar to You must provide valid scope for settings..
            </summary>
        </member>
        <member name="P:Innovatian.Configuration.Properties.Text.Key0NotFoundInSection1DuringExpansion">
            <summary>
              Looks up a localized string similar to Key not found: [{0}] in current section: [{1}]..
            </summary>
        </member>
        <member name="P:Innovatian.Configuration.Properties.Text.KeyCannotExpandOnSelf0">
            <summary>
              Looks up a localized string similar to Key cannot have a expand value of itself: {0}..
            </summary>
        </member>
        <member name="P:Innovatian.Configuration.Properties.Text.NoEmptySectionNames">
            <summary>
              Looks up a localized string similar to Sections cannot have empty names..
            </summary>
        </member>
        <member name="P:Innovatian.Configuration.Properties.Text.NoTypeConverterForRestore0">
            <summary>
              Looks up a localized string similar to There is no TypeConverter registered that can restore type {0} from a string. Please create a TypeConverter for type {0} that can save and restore from string..
            </summary>
        </member>
        <member name="P:Innovatian.Configuration.Properties.Text.TypeCantBeReloaded0">
            <summary>
              Looks up a localized string similar to {0} cannot be reloaded..
            </summary>
        </member>
        <member name="P:Innovatian.Configuration.Properties.Text.TypeCantBeSaved0">
            <summary>
              Looks up a localized string similar to {0} cannot be saved..
            </summary>
        </member>
        <member name="T:Innovatian.Configuration.IniConfigurationSource">
            <summary>
            
            </summary>
        </member>
        <member name="M:Innovatian.Configuration.IniConfigurationSource.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Innovatian.Configuration.IniConfigurationSource"/> class.
            </summary>
            <param name="data">The data.</param>
        </member>
        <member name="M:Innovatian.Configuration.IniConfigurationSource.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Innovatian.Configuration.IniConfigurationSource"/> class.
            </summary>
            <param name="data">The data.</param>
            <param name="comment"></param>
            <param name="delimiter"></param>
        </member>
        <member name="M:Innovatian.Configuration.IniConfigurationSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Innovatian.Configuration.IniConfigurationSource"/> class.
            </summary>
        </member>
        <member name="M:Innovatian.Configuration.IniConfigurationSource.FromFile(System.String)">
            <summary>
            Creates a new <see cref="T:Innovatian.Configuration.IConfigurationSource"/> instance from the file specified.
            </summary>
            <param name="fileName">
            The file to load.
            </param>
            <returns></returns>
        </member>
        <member name="M:Innovatian.Configuration.IniConfigurationSource.Load(System.String)">
            <summary>
            Loads the current instance from the given file.
            </summary>
            <param name="fileName">The name of the file to load into this instance.</param>
        </member>
        <member name="M:Innovatian.Configuration.IniConfigurationSource.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Innovatian.Configuration.IniConfigurationSource.Comment">
            <summary>
            Gets the comment string for the ini file.
            </summary>
            <value>The comment.</value>
        </member>
        <member name="P:Innovatian.Configuration.IniConfigurationSource.Delimiter">
            <summary>
            Gets the key/value pair delimiter used in the ini file.
            </summary>
            <value>The delimiter.</value>
        </member>
        <member name="T:Innovatian.Configuration.ConfigurationSection">
            <summary>
            
            </summary>
        </member>
        <member name="M:Innovatian.Configuration.ConfigurationSection.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Innovatian.Configuration.ConfigurationSection"/>
            class.
            </summary>
            <param name="sectionName">Name of the section.</param>
        </member>
        <member name="M:Innovatian.Configuration.ConfigurationSection.Get``1(System.String)">
            <summary>
            Returns the value of the setting name <paramref name="key"/> as a
            <c>T</c> instance.
            </summary>
            <typeparam name="T">The type needed by the user.</typeparam>
            <param name="key">The name of the setting.</param>
            <returns>
            returns the setting value as a <c>T</c> instance or defatult(T) if
            the key does not exist.
            </returns>
        </member>
        <member name="M:Innovatian.Configuration.ConfigurationSection.TryGet``1(System.String,``0@)">
            <summary>
            Returns <c>true</c> if the value of the setting name <paramref name="key"/> 
            exists and sets the <c>T</c> instance via the out parameter. If the key
            was not found, <c>false</c> is returned and the out value is set to default(T).
            </summary>
            <typeparam name="T">
            The type needed by the user.
            </typeparam>
            <param name="key">
            The name of the setting.
            </param>
            <param name="value">
            The value to set if the key exists.
            </param>
            <returns>returns <c>true</c> if the setting exists and sets the value as a <c>T</c> instance or
            <c>false</c> if the key does not exist and sets the out value to default(T).
            </returns>
        </member>
        <member name="M:Innovatian.Configuration.ConfigurationSection.Get``1(System.String,``0)">
            <summary>
            Returns the value of the setting name <paramref name="key"/> as a
            <c>T</c> instance.
            </summary>
            <typeparam name="T">The type needed by the user.</typeparam>
            <param name="key">The name of the setting.</param>
            <param name="defaultValue">The default value.</param>
            <returns>
            returns the setting value as a <c>T</c> instance or <paramref
            name="defaultValue"/> if the key does not exist.
            </returns>
        </member>
        <member name="M:Innovatian.Configuration.ConfigurationSection.Remove(System.String)">
            <summary>
            Removes the specified key and its value from the section.
            </summary>
            <param name="key">The name of the setting.</param>
            <returns>
            	<c>true</c> if the setting named <paramref name="key"/> existed and
                was
            removed; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Innovatian.Configuration.ConfigurationSection.Set``1(System.String,``0)">
            <summary>
            Sets the value of the setting name <paramref name="key"/>. If the setting
            does not exist, it is created.
            </summary>
            <typeparam name="T">The type of the setting being saved.</typeparam>
            <param name="key">The name of the setting.</param>
            <param name="value">The value to save in this section.</param>
        </member>
        <member name="M:Innovatian.Configuration.ConfigurationSection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can
            be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Innovatian.Configuration.ConfigurationSection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can
            be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Innovatian.Configuration.ConfigurationSection.Equals(Innovatian.Configuration.ConfigurationSection)">
            <summary>
            Indicates whether the current object is equal to another object of
            the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other" />
            parameter; otherwise, false.
            </returns>
            <param name="other">
            An object to compare with this object.
            </param>
        </member>
        <member name="M:Innovatian.Configuration.ConfigurationSection.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is
            equal to the current <see cref="T:System.Object" />.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object" /> is equal to the
            current <see cref="T:System.Object" />; otherwise, false.
            </returns>
            <param name="obj">
            The <see cref="T:System.Object" /> to compare with the current <see
            cref="T:System.Object" />. 
            </param>
            <exception cref="T:System.NullReferenceException">
            The <paramref name="obj" /> parameter is null.
            </exception><filterpriority>2</filterpriority>
        </member>
        <member name="M:Innovatian.Configuration.ConfigurationSection.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object" />.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Innovatian.Configuration.ConfigurationSection.op_Equality(Innovatian.Configuration.ConfigurationSection,Innovatian.Configuration.ConfigurationSection)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Innovatian.Configuration.ConfigurationSection.op_Inequality(Innovatian.Configuration.ConfigurationSection,Innovatian.Configuration.ConfigurationSection)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Innovatian.Configuration.ConfigurationSection.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents the current
            <see cref="T:System.Object" />.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents the current <see
            cref="T:System.Object" />.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Innovatian.Configuration.ConfigurationSection.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@System#String}}#Add(System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary>
            Adds an item to the <see
            cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <param name="item">
            The object to add to the <see
            cref="T:System.Collections.Generic.ICollection`1" />.
            </param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1" /> is
            read-only.
            </exception>
        </member>
        <member name="M:Innovatian.Configuration.ConfigurationSection.Clear">
            <summary>
            Removes all items from the <see
            cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1" /> is
            read-only. 
            </exception>
        </member>
        <member name="M:Innovatian.Configuration.ConfigurationSection.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@System#String}}#Contains(System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary>
            Determines whether the <see
            cref="T:System.Collections.Generic.ICollection`1" /> contains a
            specific value.
            </summary>
            <returns>
            true if <paramref name="item" /> is found in the <see
            cref="T:System.Collections.Generic.ICollection`1" />; otherwise,
            false.
            </returns>
            <param name="item">
            The object to locate in the <see
            cref="T:System.Collections.Generic.ICollection`1" />.
            </param>
        </member>
        <member name="M:Innovatian.Configuration.ConfigurationSection.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.String}[],System.Int32)">
            <summary>
            Copies the elements of the <see
            cref="T:System.Collections.Generic.ICollection`1" /> to an <see
            cref="T:System.Array" />, starting at a particular <see
            cref="T:System.Array" /> index.
            </summary>
            <param name="array">
            The one-dimensional <see cref="T:System.Array" /> that is the
            destination of the elements copied from <see
            cref="T:System.Collections.Generic.ICollection`1" />. The <see
            cref="T:System.Array" /> must have zero-based indexing.
            </param>
            <param name="arrayIndex">
            The zero-based index in <paramref name="array" /> at which copying
            begins.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref
            name="array" /> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref
            name="arrayIndex" /> is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException"><paramref name="array"
            /> is multidimensional. -or- <paramref name="arrayIndex" /> is equal
            to or greater than the length of <paramref name="array" />. -or- The
            number of elements in the source <see
            cref="T:System.Collections.Generic.ICollection`1" /> is greater than
            the available space from <paramref name="arrayIndex" /> to the end
            of the destination <paramref name="array" />. -or- Type <paramref
            name="{KeyValuePair{string, string}}" /> cannot be cast automatically to the type of the
            destination <paramref name="array" />.
            </exception>
        </member>
        <member name="M:Innovatian.Configuration.ConfigurationSection.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{System#String@System#String}}#Remove(System.Collections.Generic.KeyValuePair{System.String,System.String})">
            <summary>
            Removes the first occurrence of a specific object from the <see
            cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <returns>
            true if <paramref name="item" /> was successfully removed from the
            <see cref="T:System.Collections.Generic.ICollection`1" />;
            otherwise, false. This method also returns false if <paramref
            name="item" /> is not found in the original <see
            cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
            <param name="item">
            The object to remove from the <see
            cref="T:System.Collections.Generic.ICollection`1" />.
            </param>
            <exception cref="T:System.NotSupportedException">
            The <see cref="T:System.Collections.Generic.ICollection`1" /> is
            read-only.
            </exception>
        </member>
        <member name="E:Innovatian.Configuration.ConfigurationSection.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="P:Innovatian.Configuration.ConfigurationSection.Name">
            <summary>
            The name of the section.
            </summary>
            <value></value>
        </member>
        <member name="P:Innovatian.Configuration.ConfigurationSection.Count">
            <summary>
            Gets the number of elements contained in the <see
            cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
            <returns>
            The number of elements contained in the <see
            cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
        </member>
        <member name="P:Innovatian.Configuration.ConfigurationSection.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see
            cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
            <returns>
            true if the <see cref="T:System.Collections.Generic.ICollection`1"
            /> is read-only; otherwise, false.
            </returns>
        </member>
        <member name="T:Innovatian.Configuration.CommandLineConfigurationSource">
            <summary>
            
            </summary>
        </member>
        <member name="M:Innovatian.Configuration.CommandLineConfigurationSource.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Innovatian.Configuration.CommandLineConfigurationSource"/> class.
            </summary>
            <param name="args">
            The arguments to procces.
            </param>
        </member>
        <member name="M:Innovatian.Configuration.CommandLineConfigurationSource.#ctor(System.String[],System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Innovatian.Configuration.CommandLineConfigurationSource"/> class.
            </summary>
            <param name="args">
            The arguments to procces.
            </param>
            <param name="sectionName">
            Name of the section to add the settings into.
            </param>
            <param name="switches">
            The arguments switches to match against the arguments. The values
            may be accessed through these switches.
            </param>
        </member>
        <member name="M:Innovatian.Configuration.CommandLineConfigurationSource.#ctor(System.String[],System.String,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Innovatian.Configuration.CommandLineConfigurationSource"/> class.
            </summary>
            <param name="args">
            The arguments to procces.
            </param>
            <param name="sectionName">
            Name of the section to add the settings into.
            </param>
            <param name="switches">
            The arguments switches to match against the arguments. The values
            may be accessed through these switches.
            </param>
        </member>
        <member name="M:Innovatian.Configuration.CommandLineConfigurationSource.AddSwitch(System.String,System.String,System.String)">
            <summary>
            Adds the switch to match against the arguments mapping the short
            name value to the long name (and short name) keys if possible.
            </summary>
            <param name="sectionName">
            Name of the section to add the settings into.
            </param>
            <param name="longName">
            The long name of the switch.
            </param>
            <param name="shortName">
            The short name of the switch. This must be 1 or 2 characters in
            length.
            </param>
        </member>
        <member name="M:Innovatian.Configuration.CommandLineConfigurationSource.AddSwitch(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds the switch to match against the arguments mapping each switch.
            </summary>
            <param name="sectionName">
            Name of the section to add the settings into.
            </param>
            <param name="switches">
            The arguments switches to match against the arguments. The values
            may be accessed through these switches.
            </param>
        </member>
        <member name="M:Innovatian.Configuration.CommandLineConfigurationSource.AddSwitch(System.String,System.String[])">
            <summary>
            Adds the switch to match against the arguments mapping each switch.
            </summary>
            <param name="sectionName">
            Name of the section to add the settings into.
            </param>
            <param name="switches">
            The arguments switches to match against the arguments. The values
            may be accessed through these switches.
            </param>
        </member>
        <member name="M:Innovatian.Configuration.CommandLineConfigurationSource.Exists(System.String)">
            <summary>
            Determins whether the specified switch name has a corresponding value in a section.
            </summary>
            <param name="switchName">
            Name of the switch.
            </param>
            <returns>
            <c>true</c> if any section contains the switch; <c>false</c> otherwise.
            </returns>
        </member>
        <member name="M:Innovatian.Configuration.CommandLineConfigurationSource.Save">
            <summary>
            Saves this instance.
            </summary>
        </member>
        <member name="M:Innovatian.Configuration.CommandLineConfigurationSource.Reload">
            <summary>
            Reloads this instance.
            </summary>
        </member>
        <member name="T:Innovatian.Configuration.RegistryConfigurationSource">
            <summary>
            
            </summary>
        </member>
        <member name="M:Innovatian.Configuration.RegistryConfigurationSource.#ctor(Microsoft.Win32.RegistryKey)">
            <summary>
            Initializes a new instance of the <see cref="T:Innovatian.Configuration.RegistryConfigurationSource"/> class.
            </summary>
            <param name="root">The root key to load settings from.</param>
        </member>
        <member name="M:Innovatian.Configuration.RegistryConfigurationSource.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Innovatian.Configuration.RegistryConfigurationSource"/> class.
            </summary>
            <param name="root">The root key to load settings from.</param>
        </member>
        <member name="M:Innovatian.Configuration.RegistryConfigurationSource.#ctor(Microsoft.Win32.RegistryKey,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Innovatian.Configuration.RegistryConfigurationSource"/> class.
            </summary>
            <param name="root">The root key to load settings from.</param>
            <param name="recursive">if the recursively process subkeys. Default is true.</param>
        </member>
        <member name="M:Innovatian.Configuration.RegistryConfigurationSource.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Innovatian.Configuration.RegistryConfigurationSource"/> class.
            </summary>
            <param name="root">The root key to load settings from.</param>
            <param name="recursive">if the recursively process subkeys. Default is true.</param>
        </member>
        <member name="M:Innovatian.Configuration.RegistryConfigurationSource.Load(Microsoft.Win32.RegistryKey)">
            <summary>
            From the root key, create sections for every sub-key containing its values.
            </summary>
        </member>
        <member name="M:Innovatian.Configuration.RegistryConfigurationSource.GetSubKeys(Microsoft.Win32.RegistryKey)">
            <summary>
            Recursively creates full key name for all subkeys of the root.
            </summary>
        </member>
        <member name="M:Innovatian.Configuration.RegistryConfigurationSource.Save">
            <summary>
            Saves all sections. All data merged from other merged sources will
            be included.
            </summary>
        </member>
        <member name="M:Innovatian.Configuration.RegistryConfigurationSource.Reload">
            <summary>
            Discards all sections and merged sources and reloads a fresh set of
            settings.
            </summary>
        </member>
        <member name="M:Innovatian.Configuration.RegistryConfigurationSource.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Innovatian.Configuration.RegistryConfigurationSource.Root">
            <summary>
            Gets or sets the root registry key used by this source.
            </summary>
            <value>The root.</value>
        </member>
        <member name="P:Innovatian.Configuration.RegistryConfigurationSource.Recursive">
            <summary>
            Whether this instance processes registry keys recusively or just load the root values.
            </summary>
        </member>
        <member name="P:Innovatian.Configuration.RegistryConfigurationSource.IsDisposed">
            <summary>
            Returns whether this is has been disposed.
            </summary>
        </member>
    </members>
</doc>
